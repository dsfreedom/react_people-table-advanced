{"version":3,"sources":["components/Navbar.tsx","App.tsx","components/pages/HomePage.tsx","api.ts","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PersonRow.tsx","components/PeopleTable.tsx","components/pages/PeoplePage.tsx","utils/filterFunction.ts","components/pages/NotFoundPage.tsx","Root.tsx","index.tsx"],"names":["NavBar","getClassName","isActive","classNames","className","role","to","App","HomePage","API_URL","wait","delay","Promise","resolve","setTimeout","getPeople","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","SearchLink","children","params","props","useSearchParams","searchParams","search","CENTURIES_ARRAY","PeopleFilters","setSearchParams","query","get","centuries","getAll","sex","getCenturiesParams","century","currentCenturies","updatedCenturies","index","indexOf","includes","splice","push","type","placeholder","onChange","event","setSearchWith","target","map","length","Loader","PersonLink","person","slug","name","PersonRow","useParams","getParentText","parent","parentName","born","died","mother","motherName","father","fatherName","SORTING_TYPES","PeopleTable","people","sort","order","newSort","sortType","preparePeople","peopleFromServer","find","PeoplePage","useState","isLoading","setIsLoading","setPeople","errorMessage","setErrorMessage","useEffect","loadPeople","peopleData","loadingState","error","peopleArray","visiblePeople","recievedPeople","filter","normalizedQuery","toLowerCase","Math","ceil","person1","person2","localeCompare","reverse","getVisiblePeople","NotFoundPage","Root","path","element","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.2fabfc88.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => {\n  const getClassName = ({ isActive }: { isActive: boolean }) => {\n    return (classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    }));\n  };\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getClassName}>\n            Home\n          </NavLink>\n\n          <NavLink to=\"/people\" className={getClassName}>\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { NavBar } from './components/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <NavBar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchLink } from './SearchLink';\nimport { SearchParams, getSearchWith } from '../utils/searchHelper';\n\nconst CENTURIES_ARRAY = ['16', '17', '18', '19', '20'];\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n\n  const setSearchWith = (params: SearchParams) => {\n    const search = getSearchWith(searchParams, params);\n\n    setSearchParams(search);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchWith({ query: event.target.value || null });\n  };\n\n  const getCenturiesParams = (century: string, currentCenturies: string[]) => {\n    const updatedCenturies = [...currentCenturies];\n    const index = updatedCenturies.indexOf(`${century}`);\n\n    if (updatedCenturies.includes(century)) {\n      updatedCenturies.splice(index, 1);\n    } else {\n      updatedCenturies.push(century);\n    }\n\n    return { centuries: updatedCenturies };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES_ARRAY.map(century => (\n              <SearchLink\n                params={getCenturiesParams(century, centuries)}\n                data-cy=\"century\"\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              params={{ centuries: null }}\n              data-cy=\"century\"\n              className={classNames('button', 'mr-1', {\n                'is-info': !centuries.length,\n              })}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={{ sex: null, query: null, centuries: null }}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  return (\n    <Link\n      to={`../people/${person.slug}`}\n      className={classNames({\n        'has-text-danger': person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonRow: React.FC<Props> = ({ person }) => {\n  const { slug } = useParams();\n\n  const getParentText = (\n    parent: Person | undefined,\n    parentName: string | null,\n  ) => {\n    if (parent) {\n      return <PersonLink person={parent} />;\n    }\n\n    if (parentName) {\n      return parentName;\n    }\n\n    return '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': person.slug === slug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {getParentText(person.mother, person.motherName)}\n      </td>\n      <td>\n        {getParentText(person.father, person.fatherName)}\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonRow } from './PersonRow';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  people: Person[];\n};\n\nconst SORTING_TYPES = {\n  name: 'Name',\n  sex: 'Sex',\n  born: 'Born',\n  died: 'Died',\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const getSortParams = (newSort: string) => {\n    if (sort !== newSort) {\n      return { sort: newSort, order: null };\n    }\n\n    if (sort && !order) {\n      return { sort: newSort, order: 'desc' };\n    }\n\n    return { sort: null, order: null };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {Object.entries(SORTING_TYPES).map(([sortType, name]) => (\n            <th key={sortType}>\n              <span className=\"is-flex is-flex-wrap-nowrap\">\n                {name}\n                <SearchLink params={getSortParams(sortType)}>\n                  <span className=\"icon\">\n                    <i className={classNames('fas', {\n                      'fa-sort': sort !== sortType,\n                      'fa-sort-up': sort === sortType && !order,\n                      'fa-sort-down': sort === sortType && order === 'desc',\n                    })}\n                    />\n                  </span>\n                </SearchLink>\n              </span>\n            </th>\n          ))}\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonRow person={person} key={person.slug} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getPeople } from '../../api';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { Loader } from '../Loader';\nimport { PeopleTable } from '../PeopleTable';\nimport { Person } from '../../types/Person';\nimport { getVisiblePeople } from '../../utils/filterFunction';\n\nconst preparePeople = (peopleFromServer: Person[]): Person[] => {\n  return peopleFromServer.map((person) => ({\n    ...person,\n    mother: peopleFromServer.find(mother => mother.name === person.motherName),\n    father: peopleFromServer.find(father => father.name === person.fatherName),\n  }));\n};\n\nexport const PeoplePage = () => {\n  const [searchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  useEffect(() => {\n    const loadPeople = async () => {\n      setIsLoading(true);\n\n      try {\n        const peopleData = await getPeople();\n\n        setPeople(preparePeople(peopleData));\n      } catch {\n        setErrorMessage('Something went wrong');\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadPeople();\n  }, []);\n\n  const getBody = (\n    loadingState: boolean,\n    error: string,\n    peopleArray: Person[],\n  ) => {\n    if (loadingState) {\n      return <Loader />;\n    }\n\n    if (error && !loadingState) {\n      return (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          {error}\n        </p>\n      );\n    }\n\n    if (!peopleArray.length && !loadingState) {\n      return (\n        <p data-cy=\"noPeopleMessage\">\n          There are no people on the server\n        </p>\n      );\n    }\n\n    return (\n      <PeopleTable people={peopleArray} />\n    );\n  };\n\n  const visiblePeople = getVisiblePeople(people, searchParams);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {!errorMessage.length && people.length && !isLoading\n          && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {getBody(isLoading, errorMessage, visiblePeople)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Person } from '../types';\n\nexport const getVisiblePeople = (\n  recievedPeople: Person[],\n  params: URLSearchParams,\n) => {\n  const sex = params.get('sex') || '';\n  const query = params.get('query') || '';\n  const centuries = params.getAll('centuries') || [];\n  const sort = params.get('sort') || '';\n  const order = params.get('order') || '';\n  let visiblePeople = [...recievedPeople];\n\n  if (sex) {\n    visiblePeople = visiblePeople.filter(person => person.sex === sex);\n  }\n\n  if (query) {\n    const normalizedQuery = query.toLowerCase();\n\n    visiblePeople = visiblePeople\n      .filter((person) => person.name.toLowerCase().includes(normalizedQuery)\n      || person.motherName?.toLowerCase().includes(normalizedQuery)\n      || person.fatherName?.toLowerCase().includes(normalizedQuery));\n  }\n\n  if (centuries.length) {\n    visiblePeople = visiblePeople.filter(person => {\n      const century = Math.ceil(person.born / 100);\n\n      return centuries.includes(century.toString());\n    });\n  }\n\n  visiblePeople.sort((person1, person2) => {\n    switch (sort) {\n      case 'name':\n        return person1[sort].localeCompare(person2[sort]);\n      case 'sex':\n        return person1[sort].localeCompare(person2[sort]);\n      case 'born':\n        return person1[sort] - person2[sort];\n      case 'died':\n        return person1[sort] - person2[sort];\n      default:\n        return 0;\n    }\n  });\n\n  if (order === 'desc') {\n    visiblePeople.reverse();\n  }\n\n  return visiblePeople;\n};\n","export const NotFoundPage = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import {\n  HashRouter,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/pages/HomePage';\nimport { PeoplePage } from './components/pages/PeoplePage';\nimport { NotFoundPage } from './components/pages/NotFoundPage';\n\nexport const Root = () => (\n  <HashRouter>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"/\" element={<HomePage />} />\n\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n        <Route path=\"/people\" element={<PeoplePage />}>\n          <Route\n            path=\"/people/:slug?\"\n            element={<PeoplePage />}\n          />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n      </Route>\n    </Routes>\n  </HashRouter>\n);\n","import { createRoot } from 'react-dom/client';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}